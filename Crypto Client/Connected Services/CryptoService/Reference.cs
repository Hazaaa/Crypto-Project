//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crypto_Client.CryptoService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptoService.ICryptoService")]
    public interface ICryptoService {
        
        // CODEGEN: Generating message contract since the wrapper name (FileDetails) of message FileDetails does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/UploadFile", ReplyAction="http://tempuri.org/ICryptoService/UploadFileResponse")]
        Crypto_Client.CryptoService.UploadReply UploadFile(Crypto_Client.CryptoService.FileDetails request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/UploadFile", ReplyAction="http://tempuri.org/ICryptoService/UploadFileResponse")]
        System.Threading.Tasks.Task<Crypto_Client.CryptoService.UploadReply> UploadFileAsync(Crypto_Client.CryptoService.FileDetails request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GetUploadedFilesNames", ReplyAction="http://tempuri.org/ICryptoService/GetUploadedFilesNamesResponse")]
        string[] GetUploadedFilesNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/GetUploadedFilesNames", ReplyAction="http://tempuri.org/ICryptoService/GetUploadedFilesNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetUploadedFilesNamesAsync();
        
        // CODEGEN: Generating message contract since the wrapper name (FileDetails) of message FileDetails does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DownloadFile", ReplyAction="http://tempuri.org/ICryptoService/DownloadFileResponse")]
        Crypto_Client.CryptoService.FileDetails DownloadFile(Crypto_Client.CryptoService.DownloadFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DownloadFile", ReplyAction="http://tempuri.org/ICryptoService/DownloadFileResponse")]
        System.Threading.Tasks.Task<Crypto_Client.CryptoService.FileDetails> DownloadFileAsync(Crypto_Client.CryptoService.DownloadFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DeleteFile", ReplyAction="http://tempuri.org/ICryptoService/DeleteFileResponse")]
        bool DeleteFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoService/DeleteFile", ReplyAction="http://tempuri.org/ICryptoService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string fileName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileDetails", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileDetails {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileStreamReader;
        
        public FileDetails() {
        }
        
        public FileDetails(string FileName, System.IO.Stream FileStreamReader) {
            this.FileName = FileName;
            this.FileStreamReader = FileStreamReader;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadReply", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadReply {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UploadSuccess;
        
        public UploadReply() {
        }
        
        public UploadReply(bool UploadSuccess) {
            this.UploadSuccess = UploadSuccess;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFile {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public DownloadFile() {
        }
        
        public DownloadFile(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptoServiceChannel : Crypto_Client.CryptoService.ICryptoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptoServiceClient : System.ServiceModel.ClientBase<Crypto_Client.CryptoService.ICryptoService>, Crypto_Client.CryptoService.ICryptoService {
        
        public CryptoServiceClient() {
        }
        
        public CryptoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Crypto_Client.CryptoService.UploadReply Crypto_Client.CryptoService.ICryptoService.UploadFile(Crypto_Client.CryptoService.FileDetails request) {
            return base.Channel.UploadFile(request);
        }
        
        public bool UploadFile(string FileName, System.IO.Stream FileStreamReader) {
            Crypto_Client.CryptoService.FileDetails inValue = new Crypto_Client.CryptoService.FileDetails();
            inValue.FileName = FileName;
            inValue.FileStreamReader = FileStreamReader;
            Crypto_Client.CryptoService.UploadReply retVal = ((Crypto_Client.CryptoService.ICryptoService)(this)).UploadFile(inValue);
            return retVal.UploadSuccess;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Crypto_Client.CryptoService.UploadReply> Crypto_Client.CryptoService.ICryptoService.UploadFileAsync(Crypto_Client.CryptoService.FileDetails request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Crypto_Client.CryptoService.UploadReply> UploadFileAsync(string FileName, System.IO.Stream FileStreamReader) {
            Crypto_Client.CryptoService.FileDetails inValue = new Crypto_Client.CryptoService.FileDetails();
            inValue.FileName = FileName;
            inValue.FileStreamReader = FileStreamReader;
            return ((Crypto_Client.CryptoService.ICryptoService)(this)).UploadFileAsync(inValue);
        }
        
        public string[] GetUploadedFilesNames() {
            return base.Channel.GetUploadedFilesNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUploadedFilesNamesAsync() {
            return base.Channel.GetUploadedFilesNamesAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Crypto_Client.CryptoService.FileDetails Crypto_Client.CryptoService.ICryptoService.DownloadFile(Crypto_Client.CryptoService.DownloadFile request) {
            return base.Channel.DownloadFile(request);
        }
        
        public System.IO.Stream DownloadFile(ref string FileName) {
            Crypto_Client.CryptoService.DownloadFile inValue = new Crypto_Client.CryptoService.DownloadFile();
            inValue.FileName = FileName;
            Crypto_Client.CryptoService.FileDetails retVal = ((Crypto_Client.CryptoService.ICryptoService)(this)).DownloadFile(inValue);
            FileName = retVal.FileName;
            return retVal.FileStreamReader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Crypto_Client.CryptoService.FileDetails> Crypto_Client.CryptoService.ICryptoService.DownloadFileAsync(Crypto_Client.CryptoService.DownloadFile request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Crypto_Client.CryptoService.FileDetails> DownloadFileAsync(string FileName) {
            Crypto_Client.CryptoService.DownloadFile inValue = new Crypto_Client.CryptoService.DownloadFile();
            inValue.FileName = FileName;
            return ((Crypto_Client.CryptoService.ICryptoService)(this)).DownloadFileAsync(inValue);
        }
        
        public bool DeleteFile(string fileName) {
            return base.Channel.DeleteFile(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string fileName) {
            return base.Channel.DeleteFileAsync(fileName);
        }
    }
}
